{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "1b6a61b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import pyxlsb\n",
    "from datetime import date, timedelta\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "edbf7b94",
   "metadata": {},
   "outputs": [],
   "source": [
    "estoque_dtype = {\n",
    "    'Código Produto':int,\n",
    "    'Código Estabelecimento':int,\n",
    "    'Total': 'int64',\n",
    "    'Data':object\n",
    "}\n",
    "\n",
    "\n",
    "estoque = pd.read_excel(\"Estoque_Por_Dia.xlsx\",\n",
    "usecols=['Código Produto','Código Estabelecimento','Total','Data'],\n",
    "parse_dates=['Data'],\n",
    "dtype=estoque_dtype)\n",
    "\n",
    "\n",
    "estoque.rename(columns={'Total':'Estoque'},inplace=True)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "4d8b551b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Código Produto</th>\n",
       "      <th>Código Estabelecimento</th>\n",
       "      <th>Estoque</th>\n",
       "      <th>Data</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>804</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>806</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>804</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>806</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>804</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>806</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>804</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>806</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>804</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>4110020335</td>\n",
       "      <td>806</td>\n",
       "      <td>1</td>\n",
       "      <td>2025-07-12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Código Produto  Código Estabelecimento  Estoque       Data\n",
       "0      4110020335                     804        1 2025-07-08\n",
       "1      4110020335                     806        1 2025-07-08\n",
       "2      4110020335                     804        1 2025-07-09\n",
       "3      4110020335                     806        1 2025-07-09\n",
       "4      4110020335                     804        1 2025-07-10\n",
       "5      4110020335                     806        1 2025-07-10\n",
       "6      4110020335                     804        1 2025-07-11\n",
       "7      4110020335                     806        1 2025-07-11\n",
       "8      4110020335                     804        1 2025-07-12\n",
       "9      4110020335                     806        1 2025-07-12"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "estoque['Data'] = pd.to_datetime(estoque['Data'],dayfirst=True)\n",
    "estoque.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2c6551bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "Vendas_dtype = {\n",
    "    'Código Produto':int,\n",
    "    'Código Estabelecimento':int,\n",
    "    'Quantidade Faturada': 'int64',\n",
    "    'Fat Bruto':float,\n",
    "    'Dia do Mês':object\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "Vendas = pd.read_excel('Cubo de Vendas.xlsx',skiprows=9,\n",
    "usecols=['Código Produto','Código Estabelecimento','Quantidade Faturada','Fat Bruto','Dia do Mês'],\n",
    "parse_dates=['Dia do Mês'],\n",
    "dtype=Vendas_dtype)\n",
    "\n",
    "Vendas.rename(columns={'Dia do Mês':'Data'},inplace=True)\n",
    "\n",
    "Vendas['Data'] = pd.to_datetime(Vendas['Data'],dayfirst=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "fb675747",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vendas.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "9cefa009",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Data\n",
      "0 2025-07-10\n",
      "         Data\n",
      "59 2025-09-07\n"
     ]
    }
   ],
   "source": [
    "\n",
    "data_hoje = date.today()\n",
    "dias_atras = 60\n",
    "data_inicio = data_hoje - timedelta(days=dias_atras - 1)\n",
    "df_datas = pd.DataFrame(\n",
    "    pd.date_range(start=data_inicio, end=data_hoje)\n",
    ")\n",
    "df_datas.rename(columns={0: 'Data'}, inplace=True)\n",
    "\n",
    "print(df_datas.head(1))\n",
    "print(df_datas.tail(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "da5f7430",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_produtos_lojas = pd.concat([estoque[['Código Produto', 'Código Estabelecimento']], Vendas[['Código Produto', 'Código Estabelecimento']]]).drop_duplicates()\n",
    "\n",
    "df_base_completa = pd.merge(df_datas, df_produtos_lojas, how='cross')\n",
    "\n",
    "\n",
    "df_final = pd.merge(df_base_completa, estoque, on=['Data', 'Código Produto', 'Código Estabelecimento'], how='left')\n",
    "\n",
    "df_final = pd.merge(df_final, Vendas, on=['Data', 'Código Produto', 'Código Estabelecimento'], how='left')\n",
    "\n",
    "df_final = df_final.fillna(0)\n",
    "\n",
    "df_final.sort_values(by=['Código Estabelecimento', 'Código Produto', 'Data'], inplace=True)\n",
    "df_final.reset_index(drop=True, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a79d794f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Data</th>\n",
       "      <th>Código Produto</th>\n",
       "      <th>Código Estabelecimento</th>\n",
       "      <th>Estoque</th>\n",
       "      <th>Quantidade Faturada</th>\n",
       "      <th>Fat Bruto</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2025-07-10</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>136.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2025-07-11</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>136.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2025-07-12</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>135.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2025-07-13</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2025-07-14</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>135.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2025-07-15</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>134.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2025-07-16</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>133.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2025-07-17</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>133.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2025-07-18</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>133.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2025-07-19</td>\n",
       "      <td>4110850152</td>\n",
       "      <td>800</td>\n",
       "      <td>132.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>39.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Data  Código Produto  Código Estabelecimento  Estoque  \\\n",
       "0 2025-07-10      4110850152                     800    136.0   \n",
       "1 2025-07-11      4110850152                     800    136.0   \n",
       "2 2025-07-12      4110850152                     800    135.0   \n",
       "3 2025-07-13      4110850152                     800    135.0   \n",
       "4 2025-07-14      4110850152                     800    135.0   \n",
       "5 2025-07-15      4110850152                     800    134.0   \n",
       "6 2025-07-16      4110850152                     800    133.0   \n",
       "7 2025-07-17      4110850152                     800    133.0   \n",
       "8 2025-07-18      4110850152                     800    133.0   \n",
       "9 2025-07-19      4110850152                     800    132.0   \n",
       "\n",
       "   Quantidade Faturada  Fat Bruto  \n",
       "0                  0.0       0.00  \n",
       "1                  0.0       0.00  \n",
       "2                  1.0      39.99  \n",
       "3                  0.0       0.00  \n",
       "4                  0.0       0.00  \n",
       "5                  1.0      39.99  \n",
       "6                  1.0      39.99  \n",
       "7                  0.0       0.00  \n",
       "8                  0.0       0.00  \n",
       "9                  1.0      39.99  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final.head(10)\n",
    "#df_final.to_excel('teste.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "b4769e02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Data</th>\n",
       "      <th>Código Produto</th>\n",
       "      <th>Código Estabelecimento</th>\n",
       "      <th>Estoque</th>\n",
       "      <th>Quantidade Faturada</th>\n",
       "      <th>Fat Bruto</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>2025-08-04</td>\n",
       "      <td>4110853666</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>41.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>2025-07-12</td>\n",
       "      <td>4111110281</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>449.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>2025-07-22</td>\n",
       "      <td>4111110294</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6299.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>398</th>\n",
       "      <td>2025-08-17</td>\n",
       "      <td>4111110294</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5949.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>645</th>\n",
       "      <td>2025-08-24</td>\n",
       "      <td>4111110311</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>499.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>2025-07-12</td>\n",
       "      <td>4111110313</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>559.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>738</th>\n",
       "      <td>2025-07-28</td>\n",
       "      <td>4111110314</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>479.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>906</th>\n",
       "      <td>2025-07-16</td>\n",
       "      <td>4111110328</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>559.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>2025-07-27</td>\n",
       "      <td>4111110329</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>479.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1046</th>\n",
       "      <td>2025-08-05</td>\n",
       "      <td>4111110330</td>\n",
       "      <td>800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1519.98</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Data  Código Produto  Código Estabelecimento  Estoque  \\\n",
       "205  2025-08-04      4110853666                     800      0.0   \n",
       "302  2025-07-12      4111110281                     800      0.0   \n",
       "372  2025-07-22      4111110294                     800      0.0   \n",
       "398  2025-08-17      4111110294                     800      0.0   \n",
       "645  2025-08-24      4111110311                     800      0.0   \n",
       "662  2025-07-12      4111110313                     800      0.0   \n",
       "738  2025-07-28      4111110314                     800      0.0   \n",
       "906  2025-07-16      4111110328                     800      0.0   \n",
       "977  2025-07-27      4111110329                     800      0.0   \n",
       "1046 2025-08-05      4111110330                     800      0.0   \n",
       "\n",
       "      Quantidade Faturada  Fat Bruto  \n",
       "205                   1.0      41.99  \n",
       "302                   1.0     449.99  \n",
       "372                   1.0    6299.99  \n",
       "398                   1.0    5949.99  \n",
       "645                   1.0     499.99  \n",
       "662                   1.0     559.99  \n",
       "738                   1.0     479.99  \n",
       "906                   1.0     559.99  \n",
       "977                   1.0     479.99  \n",
       "1046                  2.0    1519.98  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_rupturas = df_final[(df_final['Quantidade Faturada'] > 0) & (df_final['Estoque'] == 0)]\n",
    "\n",
    "df_rupturas.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "008ad1b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df_final_ajustado = df_final.copy()\n",
    "\n",
    "df_final_ajustado.loc[df_final_ajustado['Estoque'] < 0, 'Estoque'] = 0\n",
    "\n",
    "condicao = (df_final_ajustado['Quantidade Faturada'] > 0) & (df_final_ajustado['Estoque'] == 0)\n",
    "\n",
    "df_final_ajustado.loc[condicao, 'Estoque'] = df_final_ajustado.loc[condicao, 'Quantidade Faturada']\n",
    "\n",
    "\n",
    "#df_final_ajustado.to_excel('teste_2.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "29782a4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def realizar_analise(df, group_cols):\n",
    "    qnt_faturada_col = 'Quantidade_Faturada' if 'Quantidade_Faturada' in df.columns else 'Quantidade Faturada'\n",
    "    fat_bruto_col = 'Fat_Bruto' if 'Fat_Bruto' in df.columns else 'Fat Bruto'\n",
    "\n",
    "    df_analise = df[df['Estoque'] > 0].groupby(group_cols).agg(\n",
    "        dias_com_estoque=('Data', 'count'),\n",
    "        estoque_medio=('Estoque', 'mean'),\n",
    "        venda_media=(qnt_faturada_col, 'mean'),\n",
    "        desvio_padrao=(qnt_faturada_col, 'std'),\n",
    "        quantidade_faturada_total=(qnt_faturada_col, 'sum')\n",
    "    ).reset_index()\n",
    "\n",
    "    df_abc = df.groupby(group_cols)[fat_bruto_col].sum().reset_index()\n",
    "\n",
    "    if 'Código Estabelecimento' in group_cols:\n",
    "        # Lógica corrigida para calcular o ABC por loja\n",
    "        df_abc['rank_loja'] = df_abc.groupby('Código Estabelecimento')[fat_bruto_col].rank(ascending=False)\n",
    "        df_abc.sort_values(by=['Código Estabelecimento', 'rank_loja'], inplace=True)\n",
    "        df_abc['fat_acumulado'] = df_abc.groupby('Código Estabelecimento')['Fat Bruto'].cumsum()\n",
    "        df_abc['%_acumulado'] = df_abc.groupby('Código Estabelecimento')['fat_acumulado'].apply(lambda x: x / x.max())\n",
    "    else:\n",
    "        # Lógica para análise geral (sem loja)\n",
    "        df_abc.sort_values(by=fat_bruto_col, ascending=False, inplace=True)\n",
    "        df_abc['fat_acumulado'] = df_abc[fat_bruto_col].cumsum()\n",
    "        df_abc['%_acumulado'] = df_abc['fat_acumulado'] / df_abc[fat_bruto_col].sum()\n",
    "    \n",
    "    def classificar_abc(porcentagem):\n",
    "        if porcentagem <= 0.70:\n",
    "            return 'A'\n",
    "        elif porcentagem <= 0.95:\n",
    "            return 'B'\n",
    "        else:\n",
    "            return 'C'\n",
    "    \n",
    "    df_abc['Classificacao_ABC'] = df_abc['%_acumulado'].apply(classificar_abc)\n",
    "\n",
    "    df_resultados = pd.merge(df_analise, df_abc.drop(columns=['fat_acumulado', '%_acumulado']), on=group_cols, how='left')\n",
    "\n",
    "    df_resultados['CV'] = np.where(df_resultados['venda_media'] > 0, \n",
    "                                 df_resultados['desvio_padrao'] / df_resultados['venda_media'], \n",
    "                                 np.nan)\n",
    "\n",
    "    return df_resultados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "31a316dd",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "incompatible index of inserted column with frame index",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mValueError\u001b[39m                                Traceback (most recent call last)",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/frame.py:12694\u001b[39m, in \u001b[36m_reindex_for_setitem\u001b[39m\u001b[34m(value, index)\u001b[39m\n\u001b[32m  12693\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m> \u001b[39m\u001b[32m12694\u001b[39m     reindexed_value = \u001b[43mvalue\u001b[49m\u001b[43m.\u001b[49m\u001b[43mreindex\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m)\u001b[49m._values\n\u001b[32m  12695\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[32m  12696\u001b[39m     \u001b[38;5;66;03m# raised in MultiIndex.from_tuples, see test_insert_error_msmgs\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/series.py:5164\u001b[39m, in \u001b[36mSeries.reindex\u001b[39m\u001b[34m(self, index, axis, method, copy, level, fill_value, limit, tolerance)\u001b[39m\n\u001b[32m   5147\u001b[39m \u001b[38;5;129m@doc\u001b[39m(\n\u001b[32m   5148\u001b[39m     NDFrame.reindex,  \u001b[38;5;66;03m# type: ignore[has-type]\u001b[39;00m\n\u001b[32m   5149\u001b[39m     klass=_shared_doc_kwargs[\u001b[33m\"\u001b[39m\u001b[33mklass\u001b[39m\u001b[33m\"\u001b[39m],\n\u001b[32m   (...)\u001b[39m\u001b[32m   5162\u001b[39m     tolerance=\u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[32m   5163\u001b[39m ) -> Series:\n\u001b[32m-> \u001b[39m\u001b[32m5164\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m.\u001b[49m\u001b[43mreindex\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   5165\u001b[39m \u001b[43m        \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m=\u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5166\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5167\u001b[39m \u001b[43m        \u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m=\u001b[49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5168\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5169\u001b[39m \u001b[43m        \u001b[49m\u001b[43mfill_value\u001b[49m\u001b[43m=\u001b[49m\u001b[43mfill_value\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5170\u001b[39m \u001b[43m        \u001b[49m\u001b[43mlimit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlimit\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5171\u001b[39m \u001b[43m        \u001b[49m\u001b[43mtolerance\u001b[49m\u001b[43m=\u001b[49m\u001b[43mtolerance\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   5172\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/generic.py:5629\u001b[39m, in \u001b[36mNDFrame.reindex\u001b[39m\u001b[34m(self, labels, index, columns, axis, method, copy, level, fill_value, limit, tolerance)\u001b[39m\n\u001b[32m   5628\u001b[39m \u001b[38;5;66;03m# perform the reindex on the axes\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m5629\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_reindex_axes\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   5630\u001b[39m \u001b[43m    \u001b[49m\u001b[43maxes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlimit\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtolerance\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfill_value\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcopy\u001b[49m\n\u001b[32m   5631\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m.__finalize__(\u001b[38;5;28mself\u001b[39m, method=\u001b[33m\"\u001b[39m\u001b[33mreindex\u001b[39m\u001b[33m\"\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/generic.py:5652\u001b[39m, in \u001b[36mNDFrame._reindex_axes\u001b[39m\u001b[34m(self, axes, level, limit, tolerance, method, fill_value, copy)\u001b[39m\n\u001b[32m   5651\u001b[39m ax = \u001b[38;5;28mself\u001b[39m._get_axis(a)\n\u001b[32m-> \u001b[39m\u001b[32m5652\u001b[39m new_index, indexer = \u001b[43max\u001b[49m\u001b[43m.\u001b[49m\u001b[43mreindex\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   5653\u001b[39m \u001b[43m    \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlevel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlimit\u001b[49m\u001b[43m=\u001b[49m\u001b[43mlimit\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtolerance\u001b[49m\u001b[43m=\u001b[49m\u001b[43mtolerance\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m=\u001b[49m\u001b[43mmethod\u001b[49m\n\u001b[32m   5654\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   5656\u001b[39m axis = \u001b[38;5;28mself\u001b[39m._get_axis_number(a)\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/indexes/base.py:4440\u001b[39m, in \u001b[36mIndex.reindex\u001b[39m\u001b[34m(self, target, method, level, limit, tolerance)\u001b[39m\n\u001b[32m   4438\u001b[39m             indexer, _ = \u001b[38;5;28mself\u001b[39m.get_indexer_non_unique(target)\n\u001b[32m-> \u001b[39m\u001b[32m4440\u001b[39m target = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_wrap_reindex_result\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtarget\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpreserve_names\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   4441\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m target, indexer\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2736\u001b[39m, in \u001b[36mMultiIndex._wrap_reindex_result\u001b[39m\u001b[34m(self, target, indexer, preserve_names)\u001b[39m\n\u001b[32m   2735\u001b[39m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[32m-> \u001b[39m\u001b[32m2736\u001b[39m     target = \u001b[43mMultiIndex\u001b[49m\u001b[43m.\u001b[49m\u001b[43mfrom_tuples\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtarget\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   2737\u001b[39m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[32m   2738\u001b[39m     \u001b[38;5;66;03m# not all tuples, see test_constructor_dict_multiindex_reindex_flat\u001b[39;00m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/indexes/multi.py:223\u001b[39m, in \u001b[36mnames_compat.<locals>.new_meth\u001b[39m\u001b[34m(self_or_cls, *args, **kwargs)\u001b[39m\n\u001b[32m    221\u001b[39m     kwargs[\u001b[33m\"\u001b[39m\u001b[33mnames\u001b[39m\u001b[33m\"\u001b[39m] = kwargs.pop(\u001b[33m\"\u001b[39m\u001b[33mname\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m223\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mmeth\u001b[49m\u001b[43m(\u001b[49m\u001b[43mself_or_cls\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/indexes/multi.py:618\u001b[39m, in \u001b[36mMultiIndex.from_tuples\u001b[39m\u001b[34m(cls, tuples, sortorder, names)\u001b[39m\n\u001b[32m    616\u001b[39m         tuples = np.asarray(tuples._values)\n\u001b[32m--> \u001b[39m\u001b[32m618\u001b[39m     arrays = \u001b[38;5;28mlist\u001b[39m(\u001b[43mlib\u001b[49m\u001b[43m.\u001b[49m\u001b[43mtuples_to_object_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtuples\u001b[49m\u001b[43m)\u001b[49m.T)\n\u001b[32m    619\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(tuples, \u001b[38;5;28mlist\u001b[39m):\n",
      "\u001b[36mFile \u001b[39m\u001b[32mpandas/_libs/lib.pyx:3056\u001b[39m, in \u001b[36mpandas._libs.lib.tuples_to_object_array\u001b[39m\u001b[34m()\u001b[39m\n",
      "\u001b[31mValueError\u001b[39m: Buffer dtype mismatch, expected 'Python object' but got 'long'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[31mTypeError\u001b[39m                                 Traceback (most recent call last)",
      "\u001b[32m/tmp/ipykernel_4162/3898104674.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m()\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m analise_por_loja = realizar_analise(df_final_ajustado, [\u001b[33m'Código Estabelecimento'\u001b[39m, \u001b[33m'Código Produto'\u001b[39m])\n\u001b[32m      2\u001b[39m \n\u001b[32m      3\u001b[39m df_geral_consolidado = df_final_ajustado.groupby(['Data', 'Código Produto']).agg(\n\u001b[32m      4\u001b[39m     Estoque=(\u001b[33m'Estoque'\u001b[39m, \u001b[33m'sum'\u001b[39m),\n",
      "\u001b[32m/tmp/ipykernel_4162/1282995797.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m(df, group_cols)\u001b[39m\n\u001b[32m     16\u001b[39m         \u001b[38;5;66;03m# Lógica corrigida para calcular o ABC por loja\u001b[39;00m\n\u001b[32m     17\u001b[39m         df_abc[\u001b[33m'rank_loja'\u001b[39m] = df_abc.groupby(\u001b[33m'Código Estabelecimento'\u001b[39m)[fat_bruto_col].rank(ascending=\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[32m     18\u001b[39m         df_abc.sort_values(by=[\u001b[33m'Código Estabelecimento'\u001b[39m, \u001b[33m'rank_loja'\u001b[39m], inplace=\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[32m     19\u001b[39m         df_abc[\u001b[33m'fat_acumulado'\u001b[39m] = df_abc.groupby(\u001b[33m'Código Estabelecimento'\u001b[39m)[\u001b[33m'Fat Bruto'\u001b[39m].cumsum()\n\u001b[32m---> \u001b[39m\u001b[32m20\u001b[39m         df_abc[\u001b[33m'%_acumulado'\u001b[39m] = df_abc.groupby(\u001b[33m'Código Estabelecimento'\u001b[39m)[\u001b[33m'fat_acumulado'\u001b[39m].apply(\u001b[38;5;28;01mlambda\u001b[39;00m x: x / x.max())\n\u001b[32m     21\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m     22\u001b[39m         \u001b[38;5;66;03m# Lógica para análise geral (sem loja)\u001b[39;00m\n\u001b[32m     23\u001b[39m         df_abc.sort_values(by=fat_bruto_col, ascending=\u001b[38;5;28;01mFalse\u001b[39;00m, inplace=\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/frame.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m(self, key, value)\u001b[39m\n\u001b[32m   4312\u001b[39m             \u001b[38;5;66;03m# Column to set is duplicated\u001b[39;00m\n\u001b[32m   4313\u001b[39m             self._setitem_array([key], value)\n\u001b[32m   4314\u001b[39m         \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m   4315\u001b[39m             \u001b[38;5;66;03m# set column\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m4316\u001b[39m             self._set_item(key, value)\n",
      "\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/frame.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m(self, key, value)\u001b[39m\n\u001b[32m   4525\u001b[39m \n\u001b[32m   4526\u001b[39m         Series/TimeSeries will be conformed to the DataFrames index to\n\u001b[32m   4527\u001b[39m         ensure homogeneity.\n\u001b[32m   4528\u001b[39m         \"\"\"\n\u001b[32m-> \u001b[39m\u001b[32m4529\u001b[39m         value, refs = self._sanitize_column(value)\n\u001b[32m   4530\u001b[39m \n\u001b[32m   4531\u001b[39m         if (\n\u001b[32m   4532\u001b[39m             key \u001b[38;5;28;01min\u001b[39;00m self.columns\n",
      "\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/frame.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m(self, value)\u001b[39m\n\u001b[32m   5266\u001b[39m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mnot\u001b[39;00m isinstance(value, DataFrame)\n\u001b[32m   5267\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m is_dict_like(value):\n\u001b[32m   5268\u001b[39m             \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;01mnot\u001b[39;00m isinstance(value, Series):\n\u001b[32m   5269\u001b[39m                 value = Series(value)\n\u001b[32m-> \u001b[39m\u001b[32m5270\u001b[39m             \u001b[38;5;28;01mreturn\u001b[39;00m _reindex_for_setitem(value, self.index)\n\u001b[32m   5271\u001b[39m \n\u001b[32m   5272\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m is_list_like(value):\n\u001b[32m   5273\u001b[39m             com.require_length_match(value, self.index)\n",
      "\u001b[32m/workspace/.pyenv_mirror/user/current/lib/python3.12/site-packages/pandas/core/frame.py\u001b[39m in \u001b[36m?\u001b[39m\u001b[34m(value, index)\u001b[39m\n\u001b[32m  12697\u001b[39m         \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28;01mnot\u001b[39;00m value.index.is_unique:\n\u001b[32m  12698\u001b[39m             \u001b[38;5;66;03m# duplicate axis\u001b[39;00m\n\u001b[32m  12699\u001b[39m             \u001b[38;5;28;01mraise\u001b[39;00m err\n\u001b[32m  12700\u001b[39m \n\u001b[32m> \u001b[39m\u001b[32m12701\u001b[39m         raise TypeError(\n\u001b[32m  12702\u001b[39m             \u001b[33m\"incompatible index of inserted column with frame index\"\u001b[39m\n\u001b[32m  12703\u001b[39m         ) \u001b[38;5;28;01mfrom\u001b[39;00m err\n\u001b[32m  12704\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m reindexed_value, \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "\u001b[31mTypeError\u001b[39m: incompatible index of inserted column with frame index"
     ]
    }
   ],
   "source": [
    "analise_por_loja = realizar_analise(df_final_ajustado, ['Código Estabelecimento', 'Código Produto'])\n",
    "\n",
    "df_geral_consolidado = df_final_ajustado.groupby(['Data', 'Código Produto']).agg(\n",
    "    Estoque=('Estoque', 'sum'),\n",
    "    Quantidade_Faturada=('Quantidade Faturada', 'sum'),\n",
    "    Fat_Bruto=('Fat Bruto', 'sum')\n",
    ").reset_index()\n",
    "\n",
    "analise_geral = realizar_analise(df_geral_consolidado, ['Código Produto'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889dcf2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Análises completas geradas com sucesso no arquivo 'analise_completa.xlsx'!\n"
     ]
    }
   ],
   "source": [
    "with pd.ExcelWriter('analise_completa.xlsx', engine='xlsxwriter') as writer:\n",
    "    analise_por_loja.to_excel(writer, sheet_name='Análise por Loja', index=False)\n",
    "    analise_geral.to_excel(writer, sheet_name='Análise Geral', index=False)\n",
    "\n",
    "print(\"Análises completas geradas com sucesso no arquivo 'analise_completa.xlsx'!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3707007",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
